// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("user") // user, admin, company
  status        String    @default("PENDING") // PENDING, DECLINED, ACTIVE
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  savedTools    SavedTool[]
  toolRatings   ToolRating[]
  toolComments  ToolComment[]
  blogComments  BlogComment[]
  company       Company?
  activities    Activity[]
  views Views[]
  passwordReset PasswordReset?
  comparisons   Comparison[]
  payments      Payment[]
}

// OAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Password Reset model
model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Company model
model Company {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  website     String?
  logo        String?
  userId      String   @unique
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tools       Tool[]
  payments    Payment[]
  team        TeamMember[]
}

// Team Member model
model TeamMember {
  id        String   @id @default(cuid())
  email     String
  role      String
  companyId String
  status    String    @default("PENDING") // PENDING, DECLINED, ACTIVE
  inviteToken String? @unique
  accepted  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([email, companyId])
}

// Category model
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tools       ToolCategory[]
  blogs       BlogCategory[]
}

// Tag model
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tools     ToolTag[]
  blogs     BlogTag[]
}

// Tool model
model Tool {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String   @db.Text
  longDescription String @db.Text
  website     String
  logo        String?
  imageUrl    String?
  companyId   String?
  verified    Boolean  @default(false)
  featured    Boolean  @default(false)
  pricing Json?
  features    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company     Company?     @relation(fields: [companyId], references: [id], onDelete: SetNull)
  categories  ToolCategory[]
  tags        ToolTag[]
  savedBy     SavedTool[]
  ratings     ToolRating[]
  comments    ToolComment[]
  views       Views[]
  activities  Activity[]
  comparisons ComparisonTool[]
}

// Tool Category relation
model ToolCategory {
  toolId     String
  categoryId String
  createdAt  DateTime @default(now())

  // Relations
  tool       Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([toolId, categoryId])
}

// Tool Tag relation
model ToolTag {
  toolId    String
  tagId     String
  createdAt DateTime @default(now())

  // Relations
  tool      Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([toolId, tagId])
}

// Saved Tool model
model SavedTool {
  userId    String
  toolId    String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool      Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@id([userId, toolId])
}

// Tool Rating model
model ToolRating {
  id        String   @id @default(cuid())
  rating    Int
  userId    String
  toolId    String
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool      Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@unique([userId, toolId])
}

// Tool Comment model
model ToolComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String
  toolId    String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool      Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)
  parent    ToolComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies   ToolComment[] @relation("CommentReplies")
}

// Blog model
model Blog {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  excerpt   String?  @db.Text
  coverImage     String?
  author  Json?
  published Boolean  @default(false)
  featured Boolean   @default(false)
  readingTime Int   @default(12)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  categories BlogCategory[]
  tags       BlogTag[]
  comments   BlogComment[]
  activities Activity[]
  views      Views[]

}

// Blog Category relation
model BlogCategory {
  blogId     String
  categoryId String
  createdAt  DateTime @default(now())

  // Relations
  blog       Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([blogId, categoryId])
}

// Blog Tag relation
model BlogTag {
  blogId    String
  tagId     String
  createdAt DateTime @default(now())

  // Relations
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([blogId, tagId])
}

// Blog Comment model
model BlogComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String
  blogId    String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  parent    BlogComment? @relation("BlogCommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies   BlogComment[] @relation("BlogCommentReplies")
}

// Comparison model
model Comparison {
  id          String   @id @default(cuid())
  title       String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tools       ComparisonTool[]
  activities  Activity[]
}

// Comparison Tool relation
model ComparisonTool {
  comparisonId String
  toolId       String
  notes        String?
  createdAt    DateTime @default(now())

  // Relations
  comparison   Comparison @relation(fields: [comparisonId], references: [id], onDelete: Cascade)
  tool         Tool       @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@id([comparisonId, toolId])
}

// Activity model
model Activity {
  id           String    @id @default(cuid())
  userId       String
  action       String
  toolId       String?
  blogId       String?
  comparisonId String?
  metadata     Json?
  createdAt    DateTime  @default(now())

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool         Tool?     @relation(fields: [toolId], references: [id], onDelete: SetNull)
  blog         Blog?     @relation(fields: [blogId], references: [id], onDelete: SetNull)
  comparison   Comparison? @relation(fields: [comparisonId], references: [id], onDelete: SetNull)
}

model Views {
  id           String    @id @default(cuid())
  userId       String
  toolId       String?
  blogId       String?
  createdAt    DateTime  @default(now())

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool         Tool?     @relation(fields: [toolId], references: [id], onDelete: SetNull)
  blog         Blog?     @relation(fields: [blogId], references: [id], onDelete: SetNull)
}

// Plan model
model Plan {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Float
  interval    String   // monthly, yearly
  features    Json
  active      Boolean @default(true)
  isPopular   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  payments    Payment[]
}

// Payment model
model Payment {
  id            String   @id @default(cuid())
  amount        Float
  currency      String   @default("USD")
  status        String   // pending, completed, failed, refunded
  paymentMethod String?
  paymentId     String?  @unique
  userId        String
  planId        String
  companyId     String?
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan          Plan     @relation(fields: [planId], references: [id], onDelete: Restrict)
  company       Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
}

