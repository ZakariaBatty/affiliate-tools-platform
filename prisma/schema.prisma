// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  savedTools    SavedTool[]
  toolViews     ToolView[]
  blogViews     BlogView[]
  authoredBlogs Blog[] @relation("UserAuthoredBlogs")
  companies     Company[]
  comparisons   Comparison[]
  payments      Payment[]
  passwordReset PasswordReset?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Tool related models
model Tool {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String   @db.Text
  imageUrl    String?
  websiteUrl  String?
  companyId   String?
  featured    Boolean  @default(false)
  popular     Boolean  @default(false)
  rating      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company     Company?       @relation(fields: [companyId], references: [id])
  categories  CategoryTool[]
  savedBy     SavedTool[]
  views       ToolView[]
  comparisons Comparison[]   @relation("ComparisonTools")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tools       CategoryTool[]
  blogs       BlogCategory[]
}

model CategoryTool {
  toolId     String
  categoryId String
  createdAt  DateTime @default(now())

  // Relations
  tool       Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([toolId, categoryId])
}

model SavedTool {
  userId    String
  toolId    String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool      Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@id([userId, toolId])
}

model ToolView {
  id        String   @id @default(cuid())
  userId    String?
  toolId    String
  createdAt DateTime @default(now())

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  tool      Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)
}

model Comparison {
  id        String   @id @default(cuid())
  userId    String?
  createdAt DateTime @default(now())

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  tools     Tool[]   @relation("ComparisonTools")
}

// Blog related models
model Blog {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?  @db.Text
  content     String   @db.Text
  imageUrl    String?
  published   Boolean  @default(false)
  featured    Boolean @default(false)
  authorId    String?
  readingTime Int    @default(7)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User?          @relation("UserAuthoredBlogs", fields: [authorId], references: [id], onDelete: SetNull)
  categories  BlogCategory[]
  tags        BlogTag[]
  views       BlogView[]
}

model BlogCategory {
  blogId     String
  categoryId String
  createdAt  DateTime @default(now())

  // Relations
  blog       Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([blogId, categoryId])
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  blogs     BlogTag[]
}

model BlogTag {
  blogId    String
  tagId     String
  createdAt DateTime @default(now())

  // Relations
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([blogId, tagId])
}

model BlogView {
  id        String   @id @default(cuid())
  userId    String?
  blogId    String
  createdAt DateTime @default(now())

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

// Company related models
model Company {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  logoUrl     String?
  websiteUrl  String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User     @relation(fields: [ownerId], references: [id])
  tools       Tool[]
  plans       Plan[]
  payments    Payment[]
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  price       Float
  interval    String   // monthly, yearly
  features    String[] // Array of features
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  payments    Payment[]
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float
  status      String   // pending, completed, failed
  userId      String
  companyId   String
  planId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plan        Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  COMPANY
  ADMIN
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
